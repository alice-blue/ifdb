<?php

include_once "session-start.php";

// make sure we process any persistent login state
include_once "login-persist.php";
$curuser = checkPersistentLogin();

include_once "pagetpl.php";
include_once "util.php";

include_once "game-rss.php";
include_once "gameinfo.php";



$db = dbConnect();
$curuser = checkPersistentLogin();

// check the user for ADMIN privileges and sandbox setting
$userprivs = $adminPriv = false;
$mysandbox = 0;
if ($curuser) {
    $result = mysqli_execute_query($db,
        "select `privileges`, `sandbox` from users where id=?", [$curuser]);
    list($userprivs, $mysandbox) = mysql_fetch_row($result);
    $adminPriv = (strpos($userprivs, "A") !== false);
}

$errMsg = false;
$errCode = false;




if (isset($_REQUEST['cssOverride']))
    $cssOverride = get_req_data('cssOverride');

// connect to the database
include_once "dbconnect.php";
$db = dbConnect();



// ------------------------------------------------------------------------
// get the game's TUID ID, given via ?id=xxx
function getID() {
    global $db, $errMsg, $errCode;

    $id = false;
    if (isset($_REQUEST['id'])) {
        // get the TUID
        $id = $_REQUEST['id'];
    }

    // return the ID we found
    return $id;
}

    
 
// initialize - this fetches the database record for the game we're
// being asked to display
function init()
{
    global $db, $id, $qid, $errMsg, $errCode;

    // make sure we're connected
    if ($db == false) {
        $errMsg = "An error occurred connecting to the game database. Please
          try refreshing the page. If the error persists,
          <a href=\"/contact\">contact us</a> to let us know about
          the problem.";
        $errCode = "dbError";
        return;
    }

    // check the game ID
    $id = getID();
    if (!$id) {
        if (!$errMsg) {
            $errMsg = "No game was specified in the request.";
            $errCode = "badRequest";
        }
        return;
    }

    // get the quoted ID
    $qid = mysql_real_escape_string($id, $db);
}
init();

// load the game information
//$reqVersion = $_REQUEST['version'] ?? null;
if (!$errMsg) {
    list($ifids, $title, $author, $authorExt,
         $pubYear, $pubFull, $license,
         $system, $desc, $rawDesc,
         $hasart, $genre, $seriesname, $seriesnum,
         $forgiveness, $bafsid, $version,
         $language, $languageNameOnly,
         $website, $links,
         $ratingCntAvg, $ratingCntTot, $ratingAvg, $memberReviewCnt,
         $currentUserRating, $currentUserReview,
         $editedbyid, $editedbyname, $moddate, $moddate2, $pagevsn,
         $moddatelatest,
         $historyView,
         $dlnotes, $extReviews, $extRevDisplayRank,
         $ratingHisto, $xrefs, $inrefs, $flags) =
             getGameInfo($db, $id, $curuser, $reqVersion, $errMsg, $errCode);
    $title = htmlspecialchars($title);
    $license = htmlspecialchars($license);
    $language = htmlspecialchars($language);
    $seriesnum = htmlspecialchars($seriesnum);
    $forgiveness = htmlspecialchars($forgiveness);

    $should_hide = ($flags & FLAG_SHOULD_HIDE);

}


//if ($errCode == "notFound") {
//    checkRedirect($id);
//    header("HTTP/1.1 404 Not Found");
//} else if ($errCode == "versionNotFound") {
//    header("HTTP/1.1 404 Not Found");
//} else if ($errCode == "dbError") {
//    header("HTTP/1.1 500 Internal Server Error");
//} else if ($errCode == "badRequest") {
//    header("HTTP/1.1 400 Bad Request");
//}


   
    


 //   $result = mysqli_execute_query($db,
 //       "select
 //          tag,
 //          cast(sum(gameid = ?) as int) as tagcnt,
 //          count(distinct gameid) as gamecnt
  //       from gametags
 //        where tag in (select tag from gametags where gameid = ?)
 //        group by tag", [$ifdb_section['tuid'], $ifdb_section['tuid']]);

 //   $tagInfo = [];
 //   while ([$tag, $tagCnt, $gameCnt] = mysql_fetch_row($result)) {
 //       $tagInfo[] = [
 //           'name' => $tag,
 //           'tagcnt' => $tagCnt,
 //           'gamecnt' => $gameCnt,
 //       ];
 //   }

   



pageHeader("Games with genres and tags in common with $title", false, false,
           $extraHead, true);

if ($errMsg) {         
    echo $errMsg;
} else {
    echo "<br>";
    echo "<h1>Games with genres or tags similar to <i>$title</i></h1>";
    echo "<p>The following games have genres or tags in common with <i>$title</i>:</p>";
}


//***
//------------------------ EVALUATE TAGS FOR CURRENT GAME--------------------------


// Tags to ignore for matching purposes because they're not very helpful
$tags_to_ignore = ["walkthrough", "cover art", "Winner of a comp", "translation available",
    "Miss Congeniality Winner", "Free IF Playoffs", "Let's Play", "game doesn't exist"];

// If a tag includes any of these strings, ignore it for matching purposes
$tag_strings_to_ignore = ["IFComp", "IF Comp", "Spring Thing", "Interactive Fiction Top 50", 
    "transcript", "source", "Xyzzy Awards", "Best Game", "ParserComp ", 
    "Text Adventure Literacy Jam ", "Jay is games"];

// Get tags for the current game
$current_game_tags_array = [];
$result = mysqli_execute_query($db,
//  "select distinct tag from gametags where gameid = ?", [$id]);
    "SELECT tag, COUNT(DISTINCT gameid) AS tag_frequency
     FROM gametags
     WHERE tag IN
         (SELECT DISTINCT tag FROM gametags WHERE gameid = ?)
     GROUP BY tag
     ORDER BY tag_frequency DESC", [$id]);

$tag_frequency_divisor = 0;
$frequency_buckets = 4;

echo "<details><summary>Tag scoring details</summary>";
echo "Number of frequency buckets: $frequency_buckets";
//echo "<ol>";

while ([$current_tag, $current_tag_frequency] = mysql_fetch_row($result)) {
    $exclude_current_tag = false;
    echo "<p>";
    echo '<strong>TAG:</strong> "' . $current_tag . '"<br>Frequency in database: ' . $current_tag_frequency;

    // Check to see if the current tag exactly matches any tags on our 
    // "ignore" list
    foreach ($tags_to_ignore as $ignored_tag) {
        if ( strcasecmp($current_tag, $ignored_tag) == 0) {
            // This tag is on the "ignore" list, so exclude it
            $exclude_current_tag = true;
            break;
        }
    }

    // If we haven't excluded the tag yet, check to see if it
    // includes any strings that mean this tag should be ignored
    if ($exclude_current_tag == false) {
        foreach ($tag_strings_to_ignore as $ignored_string) {
            if (strpos($current_tag, $ignored_string) !== false) {
                $exclude_current_tag = true;
                break;
             }
         }
    }

    // If we're not ignoring the current tag, add it to the list for comparison
    // with other games
    if ($exclude_current_tag == false) {
        // Since the tag frequencies have been sorted in descending order, the first 
        // non-zero value should be the highest frequency of any pf this game's tags.
        // Divide the highest frequency by 4 to find our divisor. Then we'll divide 
        // each tag frequency by this divisor and round so that we'll end up with a 
        // relative frequency (from 0 to 4) for each tag. We'll use that to 
        // calculate a uniqueness score on a scale of 1 to 5.
        if ($tag_frequency_divisor == 0) {
            $tag_frequency_divisor = round( ($current_tag_frequency/ ($frequency_buckets - 1)), 2);
        }
        echo "<br> Dividing by $tag_frequency_divisor";
        $relative_tag_frequency = round($current_tag_frequency / $tag_frequency_divisor);
        echo "<br>Relative tag frequency (on a scale of 0 to " . ($frequency_buckets-1) . "): $relative_tag_frequency";
        $uniqueness_points = (-$relative_tag_frequency + $frequency_buckets);
        echo "<br>Uniqueness points: $uniqueness_points<br>";
        $current_game_tags_array[$current_tag] = $uniqueness_points;
//              print_r($current_game_tags_array);
    } else {
        echo '<br>Ignoring tag "' . $current_tag . '"<br>';
    }
    echo "</p><br>";
}


// The genre string can have multiple genres separated by commas 
// or slashes. If there's a genre string, split it into the 
// individual genres.
$untrimmmed_current_game_genres_array = [];
$current_game_genres_array = [];

if ($genre != "") {
    if (strpos($genre, ",") !== false) {
        // The string contains commas, so split on those
        $untrimmed_current_game_genres_array = explode(",", $genre);
    } else if (strpos($genre, "/") !== false) {
        // The string contains slashes, so split on those
        $untrimmed_current_game_genres_array = explode("/", $genre);
    } else {
        $untrimmed_current_game_genres_array[] = $genre;
    }
    // Trim any whitespace
    $current_game_genres_array = array_map('trim', $untrimmed_current_game_genres_array);
}


// Depending on the current game's tags, we may want to add some more possible genres 
// to the WHERE clause so that we can compare with those games, too
$tag_to_genre_correspondence = ["wordplay" => "Wordplay",
                                "mythology" => "Mythological",
                                "science fiction" => "Science Fiction",
                                "fantasy" => "Fantasy"];
// "humor" => "Comedy",
//"comedy" => "Humor",
$honorary_genres = [];

// Look through the tags on the current game
foreach ($current_game_tags_array as $current_tag => $uniqueness_points) {
    // See if any of the current game's tags justify including more genres in our game results
    foreach ($tag_to_genre_correspondence as $corresponding_tag => $corresponding_genre) {
        if ( strcasecmp($current_tag, $corresponding_tag) == 0 ) {
            // A tag on the current game matches a tag in our tag-to-genre list.
            // (I thought about trying to avoid redundant where clauses, but didn't figure out how.
            // I guess that would go here. It would need to be case insensitive.)
            $honorary_genres[] = $corresponding_genre;
        }
    }
}

// Make the where clause
    // We only want to fetch results from relevant genres, so write the
    // WHERE clause

$where_clause = "WHERE (NOT games.id='$id')";
foreach ($current_game_genres_array as $current_genre[$i]) {
    if ($i == 0) {
        $where_clause .= " AND (";
    } else {
        $where_clause .= " OR";
    }
    $where_clause .= " (genre LIKE '%" . $corresponding_genre . "%')";
}

foreach ($honorary_genres as $honorary_genre) {
    if (count($current_game_genres_array) == 0) {
        $where_clause .= " AND (";
    } else {
        $where_clause .= " OR";
    }
    $where_clause .= " (genre LIKE '%" . $corresponding_genre . "%')";
}

if ( count($current_game_genres_array) > 0 || count($honorary_genres) > 0 ) {
    $where_clause .= " )";
}



echo "</details>";


// Uncomment to avoid limiting results by genre:
// $where_clause =""; 

echo "<p>Where clause:<br>$where_clause</p><br>";

// Fetch results for games that might be similar to the current game
$result = mysqli_execute_query($db,
    "select distinct games.id as gameid,
            games.title,
            games.author,
            games.genre,
            games.tags
      from games
      $where_clause;");
            
//    limit 10000;");

if (!$result) throw new Exception("Error: " . mysqli_error($db));

$game_matches = [];
$points_for_matched_genre = 5;

while ([$found_gameid, $found_title, $found_author, $found_genres_string, $found_tags_string] = mysql_fetch_row($result) ) {
//    echo "<br><br>CHECKING GAME: $found_title";
    
    // Get the genres for the game we've just found
    $untrimmmed_found_genres_array = [];
    $found_genres_array = [];
    if ($found_genres_string != "") {
        // The game we just found has a genre string. If it has commas or slashes, split 
        // on those to get the individual genres.
        if (strpos($found_genres_string, ",") !== false) {
            $untrimmed_found_genres_array = explode(",", $found_genres_string);
        } else if (strpos($found_genres_string, "/") !== false) {
            $untrimmed_found_genres_array = explode("/", $found_genres_string);
        } else {
            $untrimmed_found_genres_array = array($found_genres_string);
        }
    }
    // Trim any whitespace around the genres
    $found_genres_array = array_map('trim', $untrimmed_found_genres_array);
    // Remove any duplicate genres (I'm not actually sure this is necessary)
    $found_genres_array = array_unique($found_genres_array);

    // Get the tags for the game we've just found
    $found_tags_array = [];
    if ($found_tags_string != "") {
        $found_tags_array = explode (",", $found_tags_string);
    }

    // Check to see how the current game (whose page we're on) compares with the found game
    $match_score = 0;

    // Check for genre matches. More matched genres means more points.
    $matched_genres_array = [];
    if ($genre != "") {
    foreach ($current_game_genres_array as $current_genre) {
//        echo "<br> * Compare current genre ($current_genre)...";
        foreach ($found_genres_array as $found_genre) {
//            echo "...to found genre ($found_genre) ";
            if ( strcasecmp($current_genre, $found_genre) == 0 ) {
//             echo "THIS GENRE IS A MATCH<br>";
                // Does this next line actually work?
                $matched_genres_array[] = $found_genre;
                $match_score = $match_score + $points_for_matched_genre;
                break;
            }
//           echo "<br><br>";
        }   
//        echo "<br> # of common genres: " . count($matched_genres_array);
        if ( count($matched_genres_array) >= 2) {
            // If more than one genre is matched, add an extra 10 points to the score
            // (But do I really want to add 10 points EACH TIME?)
            $match_score = $match_score + 10;
        }
    }
}
//  echo "<br><br>Matched Genres Array is " . json_encode($matched_genres_array) . "<br>";

// Check for tags that match the current game's tags. Increase the game's similarity score 
// based on the uniqueness of the matching tag.
$matched_tags_array = [];
foreach ($current_game_tags_array as $current_tag => $uniqueness_points) {
    foreach ($found_tags_array as $found_tag) {
        if ( strcasecmp($current_tag, $found_tag) == 0 ) {
//        echo "Matched tag: $current_tag = $found_tag";
            $matched_tags_array[] = $found_tag;
            $match_score = $match_score + $uniqueness_points;
//            echo "<br><br>MATCH SCORE IS NOW $match_score";
            break;
        }
    }
}
if ($match_score >= 1) {
    // This game is similar in some way to the current game, 
    // so add it to the list of game matches   
    $matched_game = [];
    $matched_game["score"] = $match_score;
    $matched_game["gameid"] = $found_gameid;
    $matched_game["title"] = $found_title;

    // Put matching genres into a string with commas.
    $matched_genres_string = "";
    $matched_genres_string = implode(", ", $matched_genres_array);
//       echo "<br>Matched genres string is $matched_genres_string <br>";
    if ($matched_genres_string != "") {
        $matched_game["matched_genres"] = $matched_genres_string;
     }

    // Put matching tags into a string with commas.
    $matched_tags_string = implode(", ", $matched_tags_array);
    if ($matched_tags_string != "") {
        $matched_game["matched_tags"] = $matched_tags_string;
    }

    // Now that we've added all the relevant info for this game, 
    // put this game with the other matched games.
    $game_matches[] = $matched_game;
}
} // Where does this bracket go????

// Sort game matches by their similarity to the current game, 
// with the highest similarity score first

function sortByScore($a, $b) {
    return $b['score'] - $a['score'];
}

usort($game_matches, 'sortByScore');

// Display the list of similar games
$displayed_matches = 0;
$max_matches = 30;
foreach ($game_matches as $match) {
    $match_number = $displayed_matches + 1;
    echo '<p><strong>MATCH #' . $match_number . ':</strong> ';
    echo '<a href="https://ifdb.org/viewgame?id=' . $match['gameid'] . '">';
    echo $match['title'];
    echo '</a>';
    echo "<br>Similarity score: " . $match['score'];
    if ( isset($match['matched_genres']) ) {
        echo "<br>Matched genres: " . $match['matched_genres'];
    }
    if ( isset($match['matched_tags']) ) {
        echo "<br>Matched tags: " . $match['matched_tags'];
    }
    echo "</p><br>";
    $displayed_matches = $displayed_matches + 1;
    if ($displayed_matches == $max_matches) break;
}

//***




pageFooter();

?>
