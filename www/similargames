<?php

include_once "session-start.php";

// make sure we process any persistent login state
include_once "login-persist.php";
$curuser = checkPersistentLogin();

include_once "pagetpl.php";
include_once "util.php";
include "starctl.php";
include_once "rss.php";
include_once "game-rss.php";
include_once "gameinfo.php";
include_once "commentutil.php";
include_once "news.php";

$db = dbConnect();
$curuser = checkPersistentLogin();

// check the user for ADMIN privileges and sandbox setting
$userprivs = $adminPriv = false;
$mysandbox = 0;
if ($curuser) {
    $result = mysqli_execute_query($db,
        "select `privileges`, `sandbox` from users where id=?", [$curuser]);
    list($userprivs, $mysandbox) = mysql_fetch_row($result);
    $adminPriv = (strpos($userprivs, "A") !== false);
}

$errMsg = false;
$errCode = false;
$title = "Game Details";
$detailView = false;
$recView = false;
$historyView = false;
$reviewView = false;
$ratingsView = false;
$oneReviewView = false;
$downloadsView = false;
$myCrossRecs = 0;

// note if we're on IE6
$userAgent = $_SERVER['HTTP_USER_AGENT'];
$ie6 = preg_match("/; msie 6\./i", $userAgent);

// Zero-Width Space: for IE6, use &shy;, otherwise use &#8203;.  (The latter
// is the unicode zero-width space character, which allows a line break but
// is otherwise invisible.  &shy; is the soft hyphen, which is invisible most
// of the time but allows a line break, and is rendered as a hyphen if the
// renderer does elect to put a line break there.  IE6 doesn't handle the
// unicode zwsp; the other browsers, including IE7, do.)
$zwsp = ($ie6 ? "&shy;" : "&#8203;");

if (isset($_REQUEST['cssOverride']))
    $cssOverride = get_req_data('cssOverride');

// connect to the database
include_once "dbconnect.php";
$db = dbConnect();


// presume the default layout preferences: show off-site reviews with
// summaries in the Editorial Review section
$offsiteMode = 'A';

// if we're logged in, get the user's miscellaneous layout preferences
if ($curuser) {
    $result = mysqli_execute_query($db,
        "select offsite_display from users where id = ?", [$curuser]);
    if (mysql_num_rows($result) != 0)
        list($offsiteMode) = mysql_fetch_row($result);

    // if it's not set, default to 'A'
    if (strlen($offsiteMode) != 1 || strpos("ABLN", $offsiteMode) === false)
        $offsiteMode = 'A';
}



// ------------------------------------------------------------------------
// get the game ID - it can be given as an IFID via ?ifid=xxx, or as an
// internal ID via ?id=xxx
function getID() {
    global $db, $errMsg, $errCode;

    $id = false;
    if (isset($_REQUEST['ifid'])) {
        // We have an IFID - look up our corresponding internal ID.  Note
        // that letters in IFIDs are always upper-case; we store them in
        // the database this way, so capitalize the request string before
        // looking it up.
        $qifid = strtoupper($_REQUEST['ifid']);
        $result = mysqli_execute_query($db, "select gameid from ifids
            where ifid = ?", [$qifid]);

        // make sure we found a match
        if (mysql_num_rows($result) == 0) {
            $errMsg = "No game was found matching the requested IFID.";
            $errCode = "notFound";
            return null;
        }

        // get the ID from the record
        $id = mysql_result($result, 0, "gameid");
    } else if (isset($_REQUEST['id'])) {
        // there's no IFID, so use the internal ID number
        $id = $_REQUEST['id'];
    }

    // return the ID we found
    return $id;
}

    
 
// initialize - this fetches the database record for the game we're
// being asked to display
function init()
{
    global $db, $id, $qid, $errMsg, $errCode;

    // make sure we're connected
    if ($db == false) {
        $errMsg = "An error occurred connecting to the game database. Please
          try refreshing the page. If the error persists,
          <a href=\"/contact\">contact us</a> to let us know about
          the problem.";
        $errCode = "dbError";
        return;
    }

    // check the game ID
    $id = getID();
    if (!$id) {
        if (!$errMsg) {
            $errMsg = "No game was specified in the request.";
            $errCode = "badRequest";
        }
        return;
    }

    // get the quoted ID
    $qid = mysql_real_escape_string($id, $db);
}
init();

// load the game information
$reqVersion = $_REQUEST['version'] ?? null;
if (!$errMsg) {
    list($ifids, $title, $author, $authorExt,
         $pubYear, $pubFull, $license,
         $system, $desc, $rawDesc,
         $hasart, $genre, $seriesname, $seriesnum,
         $forgiveness, $bafsid, $version,
         $language, $languageNameOnly,
         $website, $links,
         $ratingCntAvg, $ratingCntTot, $ratingAvg, $memberReviewCnt,
         $currentUserRating, $currentUserReview,
         $editedbyid, $editedbyname, $moddate, $moddate2, $pagevsn,
         $moddatelatest,
         $historyView,
         $dlnotes, $extReviews, $extRevDisplayRank,
         $ratingHisto, $xrefs, $inrefs, $flags) =
             getGameInfo($db, $id, $curuser, $reqVersion, $errMsg, $errCode);
    $title = htmlspecialchars($title);
    $license = htmlspecialchars($license);
    $language = htmlspecialchars($language);
    $seriesnum = htmlspecialchars($seriesnum);
    $forgiveness = htmlspecialchars($forgiveness);

    $should_hide = ($flags & FLAG_SHOULD_HIDE);

}


if ($errCode == "notFound") {
    checkRedirect($id);
    header("HTTP/1.1 404 Not Found");
} else if ($errCode == "versionNotFound") {
    header("HTTP/1.1 404 Not Found");
} else if ($errCode == "dbError") {
    header("HTTP/1.1 500 Internal Server Error");
} else if ($errCode == "badRequest") {
    header("HTTP/1.1 400 Bad Request");
}


   
    
    if (!$should_hide) {
        $ifdb_section['averageRating'] = $ratingAvg;
        [$stars] = roundStars($ratingAvg);
        if ($stars) {
            $ifdb_section['starRating'] = $stars;
        }
        $ifdb_section['ratingCountAvg'] = $ratingCntAvg;
        $ifdb_section['ratingCountTot'] = $ratingCntTot;
    }

    $result = mysqli_execute_query($db,
        "select
           tag,
           cast(sum(gameid = ?) as int) as tagcnt,
           count(distinct gameid) as gamecnt
         from gametags
         where tag in (select tag from gametags where gameid = ?)
         group by tag", [$ifdb_section['tuid'], $ifdb_section['tuid']]);

    $tagInfo = [];
    while ([$tag, $tagCnt, $gameCnt] = mysql_fetch_row($result)) {
        $tagInfo[] = [
            'name' => $tag,
            'tagcnt' => $tagCnt,
            'gamecnt' => $gameCnt,
        ];
    }

   



pageHeader("$title - Details", false, false,
           $extraHead, true);
initReviewVote();

// check for a game specified by IFID and not found
if (is_null(getID()) && get_req_data('ifid') != "") {

    // check for a title in the request; if it's there, try searching for
    // matches based on the title
   
    }

    



//***
//------------------------ FIND SIMILAR GAMES --------------------------


// Tags to ignore for matching purposes because they're not very helpful
$tags_to_ignore = ["walkthrough", "cover art", "Winner of a comp", "translation available",
    "Miss Congeniality Winner", "Free IF Playoffs", "Let's Play", "game doesn't exist"];

// If a tag includes any of these strings, ignore it for matching purposes
$tag_strings_to_ignore = ["IFComp", "IF Comp", "Spring Thing", "Interactive Fiction Top 50", 
    "transcript", "source", "Xyzzy Awards", "Best Game", "ParserComp ", 
    "Text Adventure Literacy Jam ", "Jay is games"];

// Get tags for the current game
$current_game_tags_array = [];
$result = mysqli_execute_query($db,
//  "select distinct tag from gametags where gameid = ?", [$id]);
    "SELECT tag, COUNT(DISTINCT gameid) AS tag_frequency
     FROM gametags
     WHERE tag IN
         (SELECT DISTINCT tag FROM gametags WHERE gameid = ?)
     GROUP BY tag
     ORDER BY tag_frequency DESC", [$id]);

$tag_frequency_divisor = 0;

while ([$current_tag, $current_tag_frequency] = mysql_fetch_row($result)) {
    $exclude_current_tag = false;
    echo "<br><br><strong>CURRENT TAG:</strong> $current_tag<br>Frequency in database: $current_tag_frequency";

    // Check to see if the current tag exactly matches any tags on our 
    // "ignore" list
    foreach ($tags_to_ignore as $ignored_tag) {
        if ( strcasecmp($current_tag, $ignored_tag) == 0) {
            // This tag is on the "ignore" list, so exclude it
            $exclude_current_tag = true;
            break;
        }
    }

    // If we haven't excluded the tag yet, check to see if it
    // includes any strings that mean this tag should be ignored
    if ($exclude_current_tag == false) {
        foreach ($tag_strings_to_ignore as $ignored_string) {
            if (strpos($current_tag, $ignored_string) !== false) {
                $exclude_current_tag = true;
                break;
             }
         }
    }

    // If we're not ignoring the current tag, add it to the list for comparison
    // with other games
    if ($exclude_current_tag == false) {
        // Since the tag frequencies have been sorted in descending order, the first 
        // non-zero value should be the highest frequency of any pf this game's tags.
        // Divide the highest frequency by 4 to find our divisor. Then we'll divide 
        // each tag frequency by this divisor and round so that we'll end up with a 
        // relative frequency (from 0 to 4) for each tag. We'll use that to 
        // calculate a uniqueness score on a scale of 1 to 5.
        if ($tag_frequency_divisor == 0) {
            $tag_frequency_divisor = round( ($current_tag_frequency/4), 2);
        }
        echo "<br> Dividing by $tag_frequency_divisor";
        $relative_tag_frequency = round($current_tag_frequency / $tag_frequency_divisor);
        echo "<br>Relative tag freq (scale of 0 to 4): $relative_tag_frequency";
        $uniqueness_points = (-$relative_tag_frequency + 5);
        echo "<br>Uniqueness points: $uniqueness_points<br>";
        $current_game_tags_array[$current_tag] = $uniqueness_points;
//              print_r($current_game_tags_array);
    } else {
        echo '<br>Ignoring tag "' . $current_tag . '"<br>';
    }
}


// The genre string can have multiple genres separated by commas 
// or slashes. If there's a genre string, split it into the 
// individual genres.
$untrimmmed_current_game_genres_array = [];
$current_game_genres_array = [];
$where_clause = "";
if ($genre != "") {
    if (strpos($genre, ",") !== false) {
        // The string contains commas, so split on those
        $untrimmed_current_game_genres_array = explode(",", $genre);
    } else if (strpos($genre, "/") !== false) {
        // The string contains slashes, so split on those
        $untrimmed_current_game_genres_array = explode("/", $genre);
    } else {
        $untrimmed_current_game_genres_array[] = $genre;
    }
    // Trim any whitespace
    $current_game_genres_array = array_map('trim', $untrimmed_current_game_genres_array);

    // We only want to fetch results from relevant genres, so write the
    // WHERE clause
    foreach ($current_game_genres_array as $current_genre) {
        if ($where_clause == "") {
            $where_clause = "WHERE";
        } else {
            $where_clause .= " OR";
        }
        $where_clause .= " (genre LIKE '%$current_genre%') ";
    }
}

// Depending on the current game's tags, we may want to add some more possible genres 
// to the WHERE clause so that we can compare with those games, too
$tag_to_genre_correspondence = ["wordplay" => "Wordplay",
                                "mythology" => "Mythological",
                                "science fiction" => "Science Fiction",
                                "fantasy" => "Fantasy"];
// "humor" => "Comedy",
//"comedy" => "Humor",

// Look through the tags on the current game
foreach ($current_game_tags_array as $current_tag => $uniqueness_points) {
    // See if any of the current game's tags justify including more genres in our game results
    foreach ($tag_to_genre_correspondence as $corresponding_tag => $corresponding_genre) {
        if ( strcasecmp($current_tag, $corresponding_tag) == 0 ) {
            // A tag on the current game matches a tag in our tag-to-genre list.
            // (I thought about trying to avoid redundant where clauses, but didn't figure out how.
            // I guess that would go here.)
            if ($where_clause == "") {
                $where_clause = "WHERE";
             } else {
                 $where_clause .= " OR";
             }
             $where_clause .= " (genre LIKE '%" . $corresponding_genre . "%')";
        }
    }
}

echo "<br>**************************************************************************<br>";
echo "<br>Where clause is '$where_clause' <br>";

// Uncomment to avoid limiting results by genre:
// $where_clause =""; 

// Fetch results for games that might be similar to the current game
$result = mysqli_execute_query($db,
    "select distinct games.id as gameid,
            games.title,
            games.author,
            games.genre,
            games.tags
      from games
      $where_clause;");
            
//    limit 10000;");

if (!$result) throw new Exception("Error: " . mysqli_error($db));

$game_matches = [];
$points_for_matched_genre = 5;

while ([$found_gameid, $found_title, $found_author, $found_genres_string, $found_tags_string] = mysql_fetch_row($result) ) {
//    echo "<br><br>CHECKING GAME: $found_title";
    
    // Get the genres for the game we've just found
    $untrimmmed_found_genres_array = [];
    $found_genres_array = [];
    if ($found_genres_string != "") {
        // The game we just found has a genre string. If it has commas or slashes, split 
        // on those to get the individual genres.
        if (strpos($found_genres_string, ",") !== false) {
            $untrimmed_found_genres_array = explode(",", $found_genres_string);
        } else if (strpos($found_genres_string, "/") !== false) {
            $untrimmed_found_genres_array = explode("/", $found_genres_string);
        } else {
            $untrimmed_found_genres_array = array($found_genres_string);
        }
    }
    // Trim any whitespace around the genres
    $found_genres_array = array_map('trim', $untrimmed_found_genres_array);
    // Remove any duplicate genres (I'm not actually sure this is necessary)
    $found_genres_array = array_unique($found_genres_array);

    // Get the tags for the game we've just found
    $found_tags_array = [];
    if ($found_tags_string != "") {
        $found_tags_array = explode (",", $found_tags_string);
    }

    // Check to see how the current game (whose page we're on) compares with the found game
    $match_score = 0;

    // Check for genre matches. More matched genres means more points.
    $matched_genres_array = [];
    if ($genre != "") {
    foreach ($current_game_genres_array as $current_genre) {
//        echo "<br> * Compare current genre ($current_genre)...";
        foreach ($found_genres_array as $found_genre) {
//            echo "...to found genre ($found_genre) ";
            if ( strcasecmp($current_genre, $found_genre) == 0 ) {
//             echo "THIS GENRE IS A MATCH<br>";
                // Does this next line actually work?
                $matched_genres_array[] = $found_genre;
                $match_score = $match_score + $points_for_matched_genre;
                break;
            }
//           echo "<br><br>";
        }   
//        echo "<br> # of common genres: " . count($matched_genres_array);
        if ( count($matched_genres_array) >= 2) {
            // If more than one genre is matched, add an extra 10 points to the score
            // (But do I really want to add 10 points EACH TIME?)
            $match_score = $match_score + 10;
        }
    }
}
//  echo "<br><br>Matched Genres Array is " . json_encode($matched_genres_array) . "<br>";

// Check for tags that match the current game's tags. Increase the game's similarity score 
// based on the uniqueness of the matching tag.
$matched_tags_array = [];
foreach ($current_game_tags_array as $current_tag => $uniqueness_points) {
    foreach ($found_tags_array as $found_tag) {
        if ( strcasecmp($current_tag, $found_tag) == 0 ) {
//        echo "Matched tag: $current_tag = $found_tag";
            $matched_tags_array[] = $found_tag;
            $match_score = $match_score + $uniqueness_points;
//            echo "<br><br>MATCH SCORE IS NOW $match_score";
            break;
        }
    }
}
if ($match_score >= 1) {
    // This game is similar in some way to the current game, 
    // so add it to the list of game matches   
    $matched_game = [];
    $matched_game["score"] = $match_score;
    $matched_game["gameid"] = $found_gameid;
    $matched_game["title"] = $found_title;

    // Put matching genres into a string with commas.
    $matched_genres_string = "";
    $matched_genres_string = implode(", ", $matched_genres_array);
//       echo "<br>Matched genres string is $matched_genres_string <br>";
    if ($matched_genres_string != "") {
        $matched_game["matched_genres"] = $matched_genres_string;
     }

    // Put matching tags into a string with commas.
    $matched_tags_string = implode(", ", $matched_tags_array);
    if ($matched_tags_string != "") {
        $matched_game["matched_tags"] = $matched_tags_string;
    }

    // Now that we've added all the relevant info for this game, 
    // put this game with the other matched games.
    $game_matches[] = $matched_game;
}
} // Where does this bracket go????

// Sort game matches by their similarity to the current game, 
// with the highest similarity score first

function sortByScore($a, $b) {
    return $b['score'] - $a['score'];
}

usort($game_matches, 'sortByScore');

// Display the list of similar games
$displayed_matches = 0;
$max_matches = 30;
foreach ($game_matches as $match) {
    $match_number = $displayed_matches + 1;
    echo '<p><strong>MATCH #' . $match_number . ':</strong> ';
    echo '<a href="https://ifdb.org/viewgame?id=' . $match['gameid'] . '">';
    echo $match['title'];
    echo '</a>';
    echo "<br>Similarity score: " . $match['score'];
    if ( isset($match['matched_genres']) ) {
        echo "<br>Matched genres: " . $match['matched_genres'];
    }
    if ( isset($match['matched_tags']) ) {
        echo "<br>Matched tags: " . $match['matched_tags'];
    }
    echo "</p><br>";
    $displayed_matches = $displayed_matches + 1;
    if ($displayed_matches == $max_matches) break;
}

//***




pageFooter();

?>
