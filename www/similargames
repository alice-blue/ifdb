<?php

include_once "session-start.php";

// make sure we process any persistent login state
include_once "login-persist.php";
$curuser = checkPersistentLogin();

include_once "pagetpl.php";
include_once "util.php";
include "starctl.php";
include_once "rss.php";
include_once "game-rss.php";
include_once "gameinfo.php";
include_once "commentutil.php";
include_once "news.php";

$db = dbConnect();
$curuser = checkPersistentLogin();

// check the user for ADMIN privileges and sandbox setting
$userprivs = $adminPriv = false;
$mysandbox = 0;
if ($curuser) {
    $result = mysqli_execute_query($db,
        "select `privileges`, `sandbox` from users where id=?", [$curuser]);
    list($userprivs, $mysandbox) = mysql_fetch_row($result);
    $adminPriv = (strpos($userprivs, "A") !== false);
}

$errMsg = false;
$errCode = false;
$title = "Game Details";
$detailView = false;
$recView = false;
$historyView = false;
$reviewView = false;
$ratingsView = false;
$oneReviewView = false;
$downloadsView = false;
$myCrossRecs = 0;

// note if we're on IE6
$userAgent = $_SERVER['HTTP_USER_AGENT'];
$ie6 = preg_match("/; msie 6\./i", $userAgent);

// Zero-Width Space: for IE6, use &shy;, otherwise use &#8203;.  (The latter
// is the unicode zero-width space character, which allows a line break but
// is otherwise invisible.  &shy; is the soft hyphen, which is invisible most
// of the time but allows a line break, and is rendered as a hyphen if the
// renderer does elect to put a line break there.  IE6 doesn't handle the
// unicode zwsp; the other browsers, including IE7, do.)
$zwsp = ($ie6 ? "&shy;" : "&#8203;");

if (isset($_REQUEST['cssOverride']))
    $cssOverride = get_req_data('cssOverride');

// connect to the database
include_once "dbconnect.php";
$db = dbConnect();

// retrieve the special reviewer names
include_once "reviews.php";
$specialNames = initSpecialNames($db);

// cache the IF Archive mirror mapping, if any
include "mirrorUrl.php";

// presume the default layout preferences: show off-site reviews with
// summaries in the Editorial Review section
$offsiteMode = 'A';

// if we're logged in, get the user's miscellaneous layout preferences
if ($curuser) {
    $result = mysqli_execute_query($db,
        "select offsite_display from users where id = ?", [$curuser]);
    if (mysql_num_rows($result) != 0)
        list($offsiteMode) = mysql_fetch_row($result);

    // if it's not set, default to 'A'
    if (strlen($offsiteMode) != 1 || strpos("ABLN", $offsiteMode) === false)
        $offsiteMode = 'A';
}

// ------------------------------------------------------------------------
// get a footnote indicator for the given footnote number
//
function getFootnoteStar($num)
{
    $f = array("*", "&dagger;", "&Dagger;");
    if ($num <= 0)
        return "";
    else if ($num <= count($f))
        return $f[$num-1];
    else
        return str_repeat("*", 2 + $num - count($f));
}

// ------------------------------------------------------------------------
// get the game ID - it can be given as an IFID via ?ifid=xxx, or as an
// internal ID via ?id=xxx
function getID() {
    global $db, $errMsg, $errCode;

    $id = false;
    if (isset($_REQUEST['ifid'])) {
        // We have an IFID - look up our corresponding internal ID.  Note
        // that letters in IFIDs are always upper-case; we store them in
        // the database this way, so capitalize the request string before
        // looking it up.
        $qifid = strtoupper($_REQUEST['ifid']);
        $result = mysqli_execute_query($db, "select gameid from ifids
            where ifid = ?", [$qifid]);

        // make sure we found a match
        if (mysql_num_rows($result) == 0) {
            $errMsg = "No game was found matching the requested IFID.";
            $errCode = "notFound";
            return null;
        }

        // get the ID from the record
        $id = mysql_result($result, 0, "gameid");
    } else if (isset($_REQUEST['id'])) {
        // there's no IFID, so use the internal ID number
        $id = $_REQUEST['id'];
    }

    // return the ID we found
    return $id;
}

// --------------------------------------------------------------------------
function sendCoverArt()
{
    global $errMsg, $db;

    if (localImageCredentials() === null) {
        header("HTTP/1.1 302 Found");
        header("Location: https://" . PRODUCTION_SERVER_NAME . $_SERVER['REQUEST_URI']);
        exit();
    }

    // get the ID
    $id = getID();
    if (is_null($id))
        exit($errMsg);

    // look up the game
    $result = mysqli_execute_query($db,
        "select coverart, title, pagevsn from games where id = ?", [$id]);
    if (mysql_num_rows($result) == 0) {
        checkRedirect($id);
        exit("No game record found for ID");
    }

    // retrieve the image
    list($imgname, $title, $pagevsn) = mysql_fetch_row($result);

    if (isset($_REQUEST['version'])) {
        header("Cache-Control: public, max-age=31536000, immutable");
    }

    // get the target version from the request
    $targVsn = (isset($_REQUEST['version'])
                && (int)$pagevsn != (int)($_REQUEST['version']))
               ? (int)($_REQUEST['version']) : false;

    // if we're retrieving an old version, go back and find it
    if ($targVsn) {
        // query up the old versions from newest to oldest
        $result = mysqli_execute_query($db,
            "select pagevsn, deltas
            from games_history
            where id = ?
            order by pagevsn desc", [$id]);

        // scan for a version that overrides the current definition
        $rows = mysql_num_rows($result);
        $foundvsn = false;
        while ($rec = mysql_fetch_array($result, MYSQL_ASSOC)) {

            // deserialize the deltas
            $deltas = unserialize($rec['deltas']);

            // if this entry defines artwork, use the override
            if (isset($deltas['coverart']))
                $imgname = $deltas['coverart'];

            if (isset($deltas['title']))
                $title = $deltas['title'];

            // stop if this is the version we're looking for
            if ((int)$rec['pagevsn'] == $targVsn)
            {
                $foundvsn = true;
                break;
            }
        }

        // if we didn't find the requested version, give up
        if (!$foundvsn)
            exit("The requested version of the art image wasn't found");
    }

    // generate the ldesc page if applicable
    if (isset($_REQUEST['ldesc']))
        sendImageLdesc("Cover Art for $title"
                       . ($targVsn ? " (version $targVsn)" : ""),
                       $imgname);

    // retrieve the image data
    list($imgdata, $fmt) = fetch_image($imgname, true);

    // get the thumbnail setting
    $thumbnail = (isset($_REQUEST['thumbnail'])
                  ? $_REQUEST['thumbnail'] : null);

    // send it
    sendImage($imgdata, $fmt, $thumbnail);
}

// --------------------------------------------------------------------------
// display the Member Review section header
//
function showMemberReviewsHeader($showHisto)
{
    global $memberReviewCnt, $ratingsView, $reviewView, $oneReviewView, $ratingAvg, $ratingCntAvg, $ratingHisto, $id, $currentUserReview, $curuser;

    $heading = "Ratings and Reviews";
    if ($ratingsView) {
        $heading = "All Member Ratings";
    } else if ($reviewView) {
        $heading = "All Written Member Reviews";
    } else if ($oneReviewView) {
        $heading = "Review";
    }

    // start the section
    echo "<a name='memberReviews'></a>"
        . "<h2>$heading</h2><div class=indented>";

    // count the ratings in the histogram, and get the maximum
    for ($cnt = $max = 0, $i = 1 ; $i <= 5 ; $i++) {
        $cur = $ratingHisto[$i];
        $cnt += $cur;
        if ($cur > $max)
            $max = $cur;
    }

    // show the histogram if desired
    if ($showHisto && $cnt > 1) {
        global $nonce;
        echo "<style nonce='$nonce'>\n"
            . ".viewgame__histogramEnd { padding-left: 2em; }\n"
            . "</style>\n";
        echo "<table border=0 cellspacing=0 cellpadding=0><tr valign=top>"
            . "<td valign=top>"
            . "<table class=ratingHistogram border=0 cellspacing=0 cellpadding=0>";

        // show the histogram
        for ($i = 5 ; $i >= 1 ; $i--) {
            $num = $ratingHisto[$i];
            $pct = (int)($num*100 / $max);
            echo "<tr><td>$i&nbsp;star:</td>"
                . "<td><div class=ratingHistoBox>"
                . "<div class='ratingHistoBar ratingHistoBar$i'>"
                . "<style nonce='$nonce'>\n"
                . ".ratingHistoBar$i { width: $pct%; }\n"
                . "</style>\n"
                . "</div></div></td>"
                . "<td align=right>($num)</td></tr>";
        }

        echo "</table></td><td class=\"viewgame__histogramEnd\" valign=top>";
        echo "<div class=details>Average Rating: "
            . showStars($ratingAvg)
            . " based on $ratingCntAvg ratings<br>"
            . "Number of Reviews Written by IFDB Members: $memberReviewCnt<br></div>";
    }

    if ($currentUserReview || !$oneReviewView) {
        echo "<div class=details><a href=\"review?id=$id&userid=$curuser\">"
            . ($currentUserReview ? "Revise your review" : "Write a review")
            . "</a>"
            . "</div>";
    }

    // finish the histogram table if applicable
    if ($showHisto) {
        echo "</td></tr></table>";
    }
}

// ------------------------------------------------------------------------
// Convert a list of (place, division) names to a printable award list.
// We'll make the list into a semicolon-separated list of "place, division"
// items.  The "Main" division has special handling: if it's the only
// award, we omit any mention of the division at all, otherwise we call
// it "Overall".
function awardList($awards)
{
    // check for a "main" division
    $names = [];
    foreach ($awards as $a)
    {
        if ($a[1] == "Main")
        {
            // if this is the only item, leave out the division name
            // entirely, since it's just the place in the overall
            // competition; otherwise explicitly call it the "Overall"
            // division
            if (count($awards) == 1)
                $names[] = $a[0];
            else
                $names[] = "{$a[0]} overall";
        }
        else
        {
            // make the name: "Place, Division"
            $names[] = "{$a[0]}, {$a[1]}";
        }
    }

    // return the semicolon-separated list
    return implode("; ", $names);
}

// ----------------------- COVER ART HANDLING ------------------------
//
// if we're being asked for a cover art image, send that instead of
// serving up the game page
if (isset($_REQUEST['coverart'])) {
    // send the image
    sendCoverArt();

    // we only wanted the cover art image, so we're done now
    exit();
}

// initialize - this fetches the database record for the game we're
// being asked to display
function init()
{
    global $db, $id, $qid, $errMsg, $errCode;

    // make sure we're connected
    if ($db == false) {
        $errMsg = "An error occurred connecting to the game database. Please
          try refreshing the page. If the error persists,
          <a href=\"/contact\">contact us</a> to let us know about
          the problem.";
        $errCode = "dbError";
        return;
    }

    // check the game ID
    $id = getID();
    if (!$id) {
        if (!$errMsg) {
            $errMsg = "No game was specified in the request.";
            $errCode = "badRequest";
        }
        return;
    }

    // get the quoted ID
    $qid = mysql_real_escape_string($id, $db);
}
init();

// load the game information
$reqVersion = $_REQUEST['version'] ?? null;
if (!$errMsg) {
    list($ifids, $title, $author, $authorExt,
         $pubYear, $pubFull, $license,
         $system, $desc, $rawDesc,
         $hasart, $genre, $seriesname, $seriesnum,
         $forgiveness, $bafsid, $version,
         $language, $languageNameOnly,
         $website, $links,
         $ratingCntAvg, $ratingCntTot, $ratingAvg, $memberReviewCnt,
         $currentUserRating, $currentUserReview,
         $editedbyid, $editedbyname, $moddate, $moddate2, $pagevsn,
         $moddatelatest,
         $historyView,
         $dlnotes, $extReviews, $extRevDisplayRank,
         $ratingHisto, $xrefs, $inrefs, $flags) =
             getGameInfo($db, $id, $curuser, $reqVersion, $errMsg, $errCode);
    $title = htmlspecialchars($title);
    $license = htmlspecialchars($license);
    $language = htmlspecialchars($language);
    $seriesnum = htmlspecialchars($seriesnum);
    $forgiveness = htmlspecialchars($forgiveness);

    $should_hide = ($flags & FLAG_SHOULD_HIDE);

}

// check for an explicit redirect from this TUID to another TUID
function checkRedirect($id)
{
    global $db;
    $result = mysqli_execute_query($db,
        "select fwdgameid from gamefwds where gameid = ?", [$id]);
    if (mysql_num_rows($result) > 0)
    {
        // get the target game
        list($toID) = mysql_fetch_row($result);

        // build the redirect string with all of the original URL parameters
        $redir = "viewgame?id=$toID";
        foreach ($_GET as $key => $val) {
            if (strcasecmp($key, "id") != 0) {
                $val = urlencode(get_req_data($key));
                $redir .= "&$key" . ($val ? "=$val" : "");
            }
        }

        header("HTTP/1.1 301 Moved Permanently");
        header("Content-Type: text/html");
        header("Location: $redir");

        echo "The listing you requested was a duplicate. Your browser should "
            . "automatically take you to the original in a moment. "
            . "(<a href=\"$redir\">Click here</a> if your "
            . "browser doesn't load the new page automatically.)";

        exit();
    }
}

if ($errCode == "notFound") {
    checkRedirect($id);
    header("HTTP/1.1 404 Not Found");
} else if ($errCode == "versionNotFound") {
    header("HTTP/1.1 404 Not Found");
} else if ($errCode == "dbError") {
    header("HTTP/1.1 500 Internal Server Error");
} else if ($errCode == "badRequest") {
    header("HTTP/1.1 400 Bad Request");
}

// Member review query - this selects REVIEWS (not just ratings, so
// the 'review' field can't be null), BY MEMBERS (i.e., not special
// reviews, so 'special' must be null).
$selectMemberReviews = getReviewQueryByGame(
    $db, $id, "reviews.review is not null and reviews.special is null");

// Rating query - this selects RATINGS (so the 'rating' field must
// not be null), BY MEMBERS (i.e., not special
// reviews, so 'special' must be null), excluding "omitted" reviews
// ("omit this review from the average", rflags 2)
// We'll also include reviews in this list, so it's
// okay for the review field to be non-null.  If we wanted ONLY
// ratings and not any reviews, we'd also require 'review is null'.
$selectMemberRatings = getReviewQueryByGame(
    $db, $id, "reviews.rating is not null and reviews.special is null " .
        "and not(ifnull(`ifdb`.`reviews`.`RFlags`, 0) & 2)"
);


// --------------------Finding the median play time--------------------------

// Find the median of the numbers in an array
function findMedian($array_input) {
    if (!is_array($array_input)) return false;
    if (!$array_input) return 0;
    // Sort the entries in the array
    sort($array_input);
    // Divide the number of entries by two
    $total_entries = count($array_input);
    $half = $total_entries / 2;
    $int_half = (int) $half;                   // Find just the integer part of a number, in case it's not a whole number

    // Calculate median
    if ($total_entries % 2 != 0) {             // Dividing by 2 gives a remainder, so the array must have an odd number of entries
        $median = $array_input[$int_half];     // Choose the middle entry
    } else {                                   // The array has an even number of entries, so there will be two middle entries
        $middle1 = $array_input[$int_half-1];  // Find the first middle entry
        $middle2 = $array_input[$int_half];    // Find the second middle entry
        $median = ($middle1 + $middle2) / 2;
    }
    return $median;
}


// Get all of the estimated play times for this game, and put them in an array
$result = mysqli_execute_query($db, "select playertimes.id as player_time_id, time_in_minutes, time_note, userid, name from playertimes inner join users on playertimes.userid = users.id where gameid = ?", [$id]);
if (!$result) throw new Exception("Error: " . mysqli_error($db));
$alltimes = mysqli_fetch_all($result, MYSQLI_ASSOC);

// Find the median play time (in minutes) for this game
$mediantime = findMedian(array_map(fn($row) => $row['time_in_minutes'], $alltimes));

// When we display the official estimated time for a game, we want to round to the 
// nearest 5 minutes when the game is longer than 1 hour.
$rounded_median_time = 0;
if ($mediantime > 60) {
    // The game is over an hour, so round to the nearest 5 minutes. 
    $rounded_median_time =  round( $mediantime / 5 ) * 5;
} else {
    // The game is an hour or less, so round to the nearest minute.
    $rounded_median_time = round($mediantime);
}

//----------------End finding median play time------------------

//----------------Begin Play Online link stuff-------------------

// Create a play online URL for a link from $links
function constructPlayOnlineURL($link) {
    $isGameLink = false;
    $onlineInterpreterType = ""; // Options: "HTML", "Parchment", "ADRIFT". There was a HEX option, but it didn't seem like it was being used.
    $playOnlineURL = "";
 
    // if it's a game, note that we found a game link
    if ($link['isgame'])
        $isGameLink = true;

    $unboxUrl = false;
    if ($link['compression'] && $link['compressedprimary']) {
        $open = urlencode($link['compressedprimary']);
        if (preg_match('!^https?://(www\.|mirror\.)?ifarchive\.org/!', $link['url'])) {
            $linkUrl = urlencode($link['url']);
            $unboxUrl = "https://unbox.ifarchive.org/?url=$linkUrl&open=$open";
        } else {
            $springThingUrl = preg_replace('!^https?://(www\.)?springthing\.net/(\d+)/files/(.*)$!',
                'https://ifarchive.org/if-archive/games/springthing/$2/$3', $link['url']);
            if ($springThingUrl !== $link['url']) {
                $springThingUrl = urlencode($springThingUrl);
                $unboxUrl = "https://unbox.ifarchive.org/?url=$springThingUrl&open=$open";
            } else {
                $springThingUrl = preg_replace('!^https?://(www\.)?springthing\.net/(\d+)/stories/[^/]+/(.*)$!',
                    'https://ifarchive.org/if-archive/games/springthing/$2/$3', $link['url']);
                if ($springThingUrl !== $link['url']) {
                    $springThingUrl = urlencode($springThingUrl);
                    $unboxUrl = "https://unbox.ifarchive.org/?url=$springThingUrl&open=$open";
                }
            }
        }
    }

    if ($link['fmtexternid'] == 'hypertextgame')
    {
        if (!$link['compression']) {
            $onlineInterpreterType = "HTML";
            $playOnlineURL = $link['url'];
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        } else if ($unboxUrl) {
            $onlineInterpreterType = "HTML";
            $playOnlineURL = $unboxUrl;
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        }
    }

    if (stripos($link['title'], "Play Online") !== false)
    {
        $isGameLink = true;
        $onlineInterpreterType = "HTML";
        $playOnlineURL = $link['url'];
        return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
    }

    // if this is the first Parchment-capable link, and it's not compressed,
    // note it so that we can set up a Parchment play link to it
    if (in_array($link['fmtexternid'], [
        'zcode',
        'blorb/zcode',
        'glulx',
        'blorb/glulx',
        'tads2',
        'tads3',
        'hugo']))
    {
        $parchment_prefix = "https://iplayif.com/?story=";
        if (!$link['compression']) {
            $onlineInterpreterType = "Parchment";
            $playOnlineURL = $parchment_prefix . urlencode(urlToMirror($link['url']));
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        } else if ($unboxUrl) {
            $onlineInterpreterType = "Parchment";
            $playOnlineURL = $parchment_prefix . urlencode($unboxUrl);
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        }
    }

    if (in_array($link['fmtexternid'], [
        'adrift',
        'adrift38',
        'adrift39',
        'adrift5',
        'adrift5/blorb']))
    {
        if (!$link['compression']) {
            $onlineInterpreterType = "ADRIFT";
            if (preg_match('!^https?://www.adrift.co/cgi/download.cgi\?(\d+)!', $link['url'], $matches)) {
                // download.cgi does a 302 redirect to the real download URL, which play.adrift.co can't cope with
                // luckily, play.cgi does a 302 redirect to play.adrift.co with the canonical game URL
                $playOnlineURL = "https://www.adrift.co/cgi/play.cgi?" . $matches[1];
            } else {
                $playOnlineURL = "https://play.adrift.co/?game=" . urlencode($link['url']);
            }
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        } else if ($unboxUrl) {
            $onlineInterpreterType = "ADRIFT";
            $playOnlineURL = "https://play.adrift.co/?game=" . urlencode($unboxUrl);
            return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
        }
    }
    return [$isGameLink, $onlineInterpreterType, $playOnlineURL];
}

// Get a URL for the main Play Online button
$foundGame = false;
$playOnlineInterpreterType = "";
$primaryPlayOnlineURL = "";
foreach ($links as $link) {
    [$isGameLink, $onlineInterpreterType, $playOnlineURL] = constructPlayOnlineURL($link);
    if ($isGameLink) {
        $foundGame = true;
        if ($onlineInterpreterType && $playOnlineURL) {
            $playOnlineInterpreterType = $onlineInterpreterType;
            $primaryPlayOnlineURL = $playOnlineURL;
            break;
        }
    }
 }   

//----------------End play online link stuff-----------------------

// User filter ordering - if we're logged in, sort by any user filter
// (promotions and demotions) in effect.
$orderByUserFilter = 'null';
if ($curuser) {
    $orderByUserFilter = "(case ifnull(userfilters.filtertype, '*') "
                         . "when 'P' then 1 "
                         . "when 'D' then 3 "
                         . "else 2 end)";
}

// check for an RSS feed request
if (!$errMsg && isset($_REQUEST['rss'])) {

    // get the feed type
    if (isset($_REQUEST['reviews']))
        $feedType = GAME_RSS_REVIEWS;
    else if (isset($_REQUEST['downloads']))
        $feedType = GAME_RSS_DLS;
    else
        $feedType = GAME_RSS_ALL;

    // get the RSS item list
    $items = getGameRssItems($db, $id, $feedType, $title, $links, false);

    // send it
    if ($feedType == GAME_RSS_ALL) {
        sendRSS("$title - IFDB Updates",
                get_root_url() . "viewgame?id=$id",
                "Updates to <i>$title</i>'s IFDB page",
                $items, 50);
    } else if ($feedType == GAME_RSS_DLS) {
        sendRSS("$title - File Updates on IFDB",
                get_root_url() . "viewgame?id=$id",
                "IFDB File Updates for <i>$title</i>",
                $items, 50);
    } else if ($feedType == GAME_RSS_REVIEWS) {
        sendRSS("$title - IFDB Reviews",
                get_root_url() . "viewgame?id=$id&reviews",
                "IFDB Member Reviews of <i>$title</i>",
                $items, 50);
    }

    // done
    exit();
}

$json = isset($_REQUEST['json']);
if (isset($_REQUEST['ifiction']) || $json)
{
    if (!$json) {
        header("Content-Type: text/xml");
        header("Expires: Mon, 26 Jul 1997 05:00:00 GMT");
        header("Cache-Control: no-store, no-cache, must-revalidate");
    }

    // if an error occurred, show the error
    if ($errMsg) {
        $error_fields = [
            'errorCode' => $errCode,
            'errorMessage' => $errMsg,
        ];
        if ($json) {
            send_json_response($error_fields);
        } else {
            echo "<viewgame xmlns=\"http://ifdb.org/api/xmlns\">";
            echo serialize_xml($error_fields);
            echo "</viewgame>";
        }
        exit();
    }

    $identification = [];
    $bibliographic = [];
    $contacts = [];
    $ifdb_section = [];

    $story_obj = [
        'colophon' => [
            'generator' => 'ifdb.org/viewgame',
            'generatorversion' => 1,
            'originated' => date('Y-m-d', strtotime($moddate2)),
        ],
        'identification' => &$identification,
        'bibliographic' => &$bibliographic,
        'contacts' => &$contacts,
    ];

    if ($json) {
        $identification['ifids'] = $ifids;
        if ($bafsid)
            $identification['bafn'] = $bafsid;

        $story_obj['ifdb'] = &$ifdb_section;
    } else {
        foreach($ifids as $i)
            $identification[] = ['ifid' => $i];
        if ($bafsid)
            $identification[] = ['bafn' => $bafsid];

        $story_obj['ifdb'] = [
            '_attrs' => ['xmlns' => 'http://ifdb.org/api/xmlns'],
            '_contents' => &$ifdb_section,
        ];
    }

    // Figure the format.  This is actually a bit tricky, since we keep
    // different data from babel on this count.  First, try basing this
    // on the development system ID, since many development systems map
    // to specific output formats.
    $formatMap = [
        "TADS 2" => "tads2",
        "TADS 3" => "tads3",
        "Hugo" => "hugo",
        "AGT" => "agt",
        "Alan 2" => "alan2",
        "Alan 3" => "alan3",
        "ADRIFT" => "adrift",
        "AdvSys" => "advsys",
        "Level 9" => "level9",
        "Magnetic Scrolls" => "magscrolls"
    ];
    $format = false;
    if (isset($formatMap[$system])) {
        $format = $formatMap[$system];
    }

    // If that didn't work, scan the download links.  Check the format ID
    // for each link: most of our story file formats map to babel formats.
    // So, if we can find a story file among the downloads, we'll know the
    // babel format.
    if (!$format) {
        $linkTypeMap = [
            "tads2" => "tads2",
            "tads3" => "tads3",
            "zcode" => "zcode",
            "blorb/zcode" => "zcode",
            "glulx" => "glulx",
            "blorb/glulx" => "glulx",
            "hugo" => "hugo",
            "alan2" => "alan2",
            "alan3" => "alan3",
            "agt" => "agt",
            "adrift" => "adrift",
            "advsys" => "advsys",
            "executable" => "executable"
        ];

        foreach ($links as $l) {
            $xid = $l['fmtexternid'];
            if (isset($linkTypeMap[$xid])) {
                $format = $linkTypeMap[$xid];
                break;
            }
        }
    }

    if ($format) {
        if ($json) {
            $identification['format'] = $format;
        } else {
            $identification[] = ['format' => $format];
        }
    }

    $bibliographic['title'] = $title;
    $bibliographic['author'] = $author;

    // Pull out the language code from the language string, which
    // we've formatted as something like "English (en-US)".  If there
    // are no parens, we must not have found a name for the language,
    // so the whole language string is the identifier.
    if (preg_match("/\(([-a-z]+)\)$/i", $language, $match))
        $language = $match[1];
    if ($language)
        $bibliographic['language'] = $language;

    $firstpublished = $pubFull ? date("Y-m-d", strtotime($pubFull)) : $pubYear;
    if ($firstpublished)
        $bibliographic['firstpublished'] = $firstpublished;

    if ($genre)
        $bibliographic['genre'] = $genre;

    $desc = fixDesc($rawDesc, $json ? 0 : FixDescIfic);
    if ($desc)
        $bibliographic['description'] = $desc;

    if ($website)
        $contacts['url'] = $website;

    $ifdb_section['tuid'] = $id;
    $ifdb_section['pageversion'] = $pagevsn;
    $ifdb_section['link'] = get_root_url() . "viewgame?id=$id";
    if ($hasart) {
        $ifdb_section['coverart'] = [
            'url' => get_root_url() . "coverart?id=$id&version=$pagevsn",
        ];
    }

    if ($rounded_median_time >= 1) {
        if ($json) {
            $ifdb_section['playTimeInMinutes'] = $rounded_median_time;
        } else {
            $ifdb_section[] = ['playTimeInMinutes' => $rounded_median_time];
        }
     }

    // Include the same URL that we use for the big "Play Online" button
    if ($primaryPlayOnlineURL) {
        if ($json) {
            $ifdb_section['primaryPlayOnlineUrl'] = $primaryPlayOnlineURL;
        } else {
            $ifdb_section[] = ['primaryPlayOnlineUrl' => $primaryPlayOnlineURL];
        }
    }
        
    
    
    if (!$should_hide) {
        $ifdb_section['averageRating'] = $ratingAvg;
        [$stars] = roundStars($ratingAvg);
        if ($stars) {
            $ifdb_section['starRating'] = $stars;
        }
        $ifdb_section['ratingCountAvg'] = $ratingCntAvg;
        $ifdb_section['ratingCountTot'] = $ratingCntTot;
    }

    $result = mysqli_execute_query($db,
        "select
           tag,
           cast(sum(gameid = ?) as int) as tagcnt,
           count(distinct gameid) as gamecnt
         from gametags
         where tag in (select tag from gametags where gameid = ?)
         group by tag", [$ifdb_section['tuid'], $ifdb_section['tuid']]);

    $tagInfo = [];
    while ([$tag, $tagCnt, $gameCnt] = mysql_fetch_row($result)) {
        $tagInfo[] = [
            'name' => $tag,
            'tagcnt' => $tagCnt,
            'gamecnt' => $gameCnt,
        ];
    }

    if ($json) {
        $ifdb_section['tags'] = $tagInfo;
    } else {
        $ifdb_section['tags'] = array_map(function ($tag) { return ['tag' => $tag]; }, $tagInfo);
    }

    if ($json) {
        send_json_response($story_obj);
    } else {
        echo "<ifindex version=\"1.0\" "
            .    "xmlns=\"http://babel.ifarchive.org/protocol/iFiction/\">";
        echo serialize_xml(['story' => $story_obj]);
        echo '</ifindex>';
    }
    exit();
}


pageHeader("$title - Details", false, false,
           $extraHead, true);
initReviewVote();

// check for a game specified by IFID and not found
if (is_null(getID()) && get_req_data('ifid') != "") {

    // check for a title in the request; if it's there, try searching for
    // matches based on the title
   
    }

    



//***
//------------------------ FIND SIMILAR GAMES --------------------------


// Tags to ignore for matching purposes because they're not very helpful
$tags_to_ignore = ["walkthrough", "cover art", "Winner of a comp", "translation available",
    "Miss Congeniality Winner", "Free IF Playoffs", "Let's Play", "game doesn't exist"];

// If a tag includes any of these strings, ignore it for matching purposes
$tag_strings_to_ignore = ["IFComp", "IF Comp", "Spring Thing", "Interactive Fiction Top 50", 
    "transcript", "source", "Xyzzy Awards", "Best Game", "ParserComp ", 
    "Text Adventure Literacy Jam ", "Jay is games"];

// Get tags for the current game
$current_game_tags_array = [];
$result = mysqli_execute_query($db,
//  "select distinct tag from gametags where gameid = ?", [$id]);
    "SELECT tag, COUNT(DISTINCT gameid) AS tag_frequency
     FROM gametags
     WHERE tag IN
         (SELECT DISTINCT tag FROM gametags WHERE gameid = ?)
     GROUP BY tag
     ORDER BY tag_frequency DESC", [$id]);

$tag_frequency_divisor = 0;

while ([$current_tag, $current_tag_frequency] = mysql_fetch_row($result)) {
    $exclude_current_tag = false;
    echo "<br><br><strong>CURRENT TAG:</strong> $current_tag<br>Frequency in database: $current_tag_frequency";

    // Check to see if the current tag exactly matches any tags on our 
    // "ignore" list
    foreach ($tags_to_ignore as $ignored_tag) {
        if ( strcasecmp($current_tag, $ignored_tag) == 0) {
            // This tag is on the "ignore" list, so exclude it
            $exclude_current_tag = true;
            break;
        }
    }

    // If we haven't excluded the tag yet, check to see if it
    // includes any strings that mean this tag should be ignored
    if ($exclude_current_tag == false) {
        foreach ($tag_strings_to_ignore as $ignored_string) {
            if (strpos($current_tag, $ignored_string) !== false) {
                $exclude_current_tag = true;
                break;
             }
         }
    }

    // If we're not ignoring the current tag, add it to the list for comparison
    // with other games
    if ($exclude_current_tag == false) {
        // Since the tag frequencies have been sorted in descending order, the first 
        // non-zero value should be the highest frequency of any pf this game's tags.
        // Divide the highest frequency by 4 to find our divisor. Then we'll divide 
        // each tag frequency by this divisor and round so that we'll end up with a 
        // relative frequency (from 0 to 4) for each tag. We'll use that to 
        // calculate a uniqueness score on a scale of 1 to 5.
        if ($tag_frequency_divisor == 0) {
            $tag_frequency_divisor = round( ($current_tag_frequency/4), 2);
        }
        echo "<br> Dividing by $tag_frequency_divisor";
        $relative_tag_frequency = round($current_tag_frequency / $tag_frequency_divisor);
        echo "<br>Relative tag freq (scale of 0 to 4): $relative_tag_frequency";
        $uniqueness_points = (-$relative_tag_frequency + 5);
        echo "<br>Uniqueness points: $uniqueness_points<br>";
        $current_game_tags_array[$current_tag] = $uniqueness_points;
//              print_r($current_game_tags_array);
    } else {
        echo '<br>Ignoring tag "' . $current_tag . '"<br>';
    }
}


// The genre string can have multiple genres separated by commas 
// or slashes. If there's a genre string, split it into the 
// individual genres.
$untrimmmed_current_game_genres_array = [];
$current_game_genres_array = [];
$where_clause = "";
if ($genre != "") {
    if (strpos($genre, ",") !== false) {
        // The string contains commas, so split on those
        $untrimmed_current_game_genres_array = explode(",", $genre);
    } else if (strpos($genre, "/") !== false) {
        // The string contains slashes, so split on those
        $untrimmed_current_game_genres_array = explode("/", $genre);
    } else {
        $untrimmed_current_game_genres_array[] = $genre;
    }
    // Trim any whitespace
    $current_game_genres_array = array_map('trim', $untrimmed_current_game_genres_array);

    // We only want to fetch results from relevant genres, so write the
    // WHERE clause
    foreach ($current_game_genres_array as $current_genre) {
        if ($where_clause == "") {
            $where_clause = "WHERE";
        } else {
            $where_clause .= " OR";
        }
        $where_clause .= " (genre LIKE '%$current_genre%') ";
    }
}

// Depending on the current game's tags, we may want to add some more possible genres 
// to the WHERE clause so that we can compare with those games, too
$tag_to_genre_correspondence = ["wordplay" => "Wordplay",
                                "mythology" => "Mythological",
                                "science fiction" => "Science Fiction",
                                "fantasy" => "Fantasy"];
// "humor" => "Comedy",
//"comedy" => "Humor",

// Look through the tags on the current game
foreach ($current_game_tags_array as $current_tag => $uniqueness_points) {
    // See if any of the current game's tags justify including more genres in our game results
    foreach ($tag_to_genre_correspondence as $corresponding_tag => $corresponding_genre) {
        if ( strcasecmp($current_tag, $corresponding_tag) == 0 ) {
            // A tag on the current game matches a tag in our tag-to-genre list.
            // (I thought about trying to avoid redundant where clauses, but didn't figure out how.
            // I guess that would go here.)
            if ($where_clause == "") {
                $where_clause = "WHERE";
             } else {
                 $where_clause .= " OR";
             }
             $where_clause .= " (genre LIKE '%" . $corresponding_genre . "%')";
        }
    }
}

echo "<br>**************************************************************************<br>";
echo "<br>Where clause is '$where_clause' <br>";

// Uncomment to avoid limiting results by genre:
// $where_clause =""; 

// Fetch results for games that might be similar to the current game
$result = mysqli_execute_query($db,
    "select distinct games.id as gameid,
            games.title,
            games.author,
            games.genre,
            games.tags
      from games
      $where_clause;");
            
//    limit 10000;");

if (!$result) throw new Exception("Error: " . mysqli_error($db));

$game_matches = [];
$points_for_matched_genre = 5;

while ([$found_gameid, $found_title, $found_author, $found_genres_string, $found_tags_string] = mysql_fetch_row($result) ) {
//    echo "<br><br>CHECKING GAME: $found_title";
    
    // Get the genres for the game we've just found
    $untrimmmed_found_genres_array = [];
    $found_genres_array = [];
    if ($found_genres_string != "") {
        // The game we just found has a genre string. If it has commas or slashes, split 
        // on those to get the individual genres.
        if (strpos($found_genres_string, ",") !== false) {
            $untrimmed_found_genres_array = explode(",", $found_genres_string);
        } else if (strpos($found_genres_string, "/") !== false) {
            $untrimmed_found_genres_array = explode("/", $found_genres_string);
        } else {
            $untrimmed_found_genres_array = array($found_genres_string);
        }
    }
    // Trim any whitespace around the genres
    $found_genres_array = array_map('trim', $untrimmed_found_genres_array);
    // Remove any duplicate genres (I'm not actually sure this is necessary)
    $found_genres_array = array_unique($found_genres_array);

    // Get the tags for the game we've just found
    $found_tags_array = [];
    if ($found_tags_string != "") {
        $found_tags_array = explode (",", $found_tags_string);
    }

    // Check to see how the current game (whose page we're on) compares with the found game
    $match_score = 0;

    // Check for genre matches. More matched genres means more points.
    $matched_genres_array = [];
    if ($genre != "") {
    foreach ($current_game_genres_array as $current_genre) {
//        echo "<br> * Compare current genre ($current_genre)...";
        foreach ($found_genres_array as $found_genre) {
//            echo "...to found genre ($found_genre) ";
            if ( strcasecmp($current_genre, $found_genre) == 0 ) {
//             echo "THIS GENRE IS A MATCH<br>";
                // Does this next line actually work?
                $matched_genres_array[] = $found_genre;
                $match_score = $match_score + $points_for_matched_genre;
                break;
            }
//           echo "<br><br>";
        }   
//        echo "<br> # of common genres: " . count($matched_genres_array);
        if ( count($matched_genres_array) >= 2) {
            // If more than one genre is matched, add an extra 10 points to the score
            // (But do I really want to add 10 points EACH TIME?)
            $match_score = $match_score + 10;
        }
    }
}
//  echo "<br><br>Matched Genres Array is " . json_encode($matched_genres_array) . "<br>";

// Check for tags that match the current game's tags. Increase the game's similarity score 
// based on the uniqueness of the matching tag.
$matched_tags_array = [];
foreach ($current_game_tags_array as $current_tag => $uniqueness_points) {
    foreach ($found_tags_array as $found_tag) {
        if ( strcasecmp($current_tag, $found_tag) == 0 ) {
//        echo "Matched tag: $current_tag = $found_tag";
            $matched_tags_array[] = $found_tag;
            $match_score = $match_score + $uniqueness_points;
//            echo "<br><br>MATCH SCORE IS NOW $match_score";
            break;
        }
    }
}
if ($match_score >= 1) {
    // This game is similar in some way to the current game, 
    // so add it to the list of game matches   
    $matched_game = [];
    $matched_game["score"] = $match_score;
    $matched_game["gameid"] = $found_gameid;
    $matched_game["title"] = $found_title;

    // Put matching genres into a string with commas.
    $matched_genres_string = "";
    $matched_genres_string = implode(", ", $matched_genres_array);
//       echo "<br>Matched genres string is $matched_genres_string <br>";
    if ($matched_genres_string != "") {
        $matched_game["matched_genres"] = $matched_genres_string;
     }

    // Put matching tags into a string with commas.
    $matched_tags_string = implode(", ", $matched_tags_array);
    if ($matched_tags_string != "") {
        $matched_game["matched_tags"] = $matched_tags_string;
    }

    // Now that we've added all the relevant info for this game, 
    // put this game with the other matched games.
    $game_matches[] = $matched_game;
}
} // Where does this bracket go????

// Sort game matches by their similarity to the current game, 
// with the highest similarity score first

function sortByScore($a, $b) {
    return $b['score'] - $a['score'];
}

usort($game_matches, 'sortByScore');

// Display the list of similar games
$displayed_matches = 0;
$max_matches = 30;
foreach ($game_matches as $match) {
    $match_number = $displayed_matches + 1;
    echo '<p><strong>MATCH #' . $match_number . ':</strong> ';
    echo '<a href="https://ifdb.org/viewgame?id=' . $match['gameid'] . '">';
    echo $match['title'];
    echo '</a>';
    echo "<br>Similarity score: " . $match['score'];
    if ( isset($match['matched_genres']) ) {
        echo "<br>Matched genres: " . $match['matched_genres'];
    }
    if ( isset($match['matched_tags']) ) {
        echo "<br>Matched tags: " . $match['matched_tags'];
    }
    echo "</p><br>";
    $displayed_matches = $displayed_matches + 1;
    if ($displayed_matches == $max_matches) break;
}

//***




pageFooter();

?>
